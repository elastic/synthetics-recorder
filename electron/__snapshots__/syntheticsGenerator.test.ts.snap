// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Synthetics JavaScript formatter accepts custom step organization 1`] = `
"const { journey, step, expect } = require('@elastic/synthetics');

journey('Recorded journey', async ({ page, context }) => {
  let page1;
  step('Open new page', async () => {
    await page.goto('https://vigneshh.in/');
  });
  step('Assert text=Babel Minify isVisible', async () => {
    expect(await page.isVisible('text=Babel Minify')).toBeTruthy();
    expect(await page.isEditable('text=Babel Minify')).toBeTruthy();
  });
  step('Assert text=Babel Minify textContent', async () => {
    expect(await page.textContent('text=Babel Minify')).toMatch('Babel');
    [page1] = await Promise.all([
      page.waitForEvent('popup'),
      page.locator('text=Babel Minify').click()
    ]);
    await Promise.all([
      page1.waitForNavigation(),
      page1.locator('a:has-text(\\"smoke\\")').click()
    ]);
  });
  step('Close page', async () => {
    await page1.close();
  });
});"
`;

exports[`Synthetics JavaScript formatter does not hoist when all accesses are in one step 1`] = `
"let page1;
let page2;
step('Go to https://vigneshh.in/', async () => {
  await page.goto('https://vigneshh.in/');
  [page1] = await Promise.all([
    page.waitForEvent('popup'),
    page.locator('text=Tailor').click()
  ]);
  await page1.locator('text=Packages 0').click();
  expect(page1.url()).toBe('https://github.com/orgs/zalando/packages?repo_name=tailor');
  await page1.close();
  [page2] = await Promise.all([
    page.waitForEvent('popup'),
    page.locator('text=Babel Minify').click()
  ]);
  await page2.close();
});"
`;

exports[`Synthetics JavaScript formatter hoist accounts for popup alias 1`] = `
"let page1;
let page2;
step('Go to https://vigneshh.in/', async () => {
  await page.goto('https://vigneshh.in/');
  [page1] = await Promise.all([
    page.waitForEvent('popup'),
    page.locator('text=Tailor').click()
  ]);
  await page1.locator('text=Packages 0').click();
  expect(page1.url()).toBe('https://github.com/orgs/zalando/packages?repo_name=tailor');
});
step('Close page', async () => {
  await page1.close();
  [page2] = await Promise.all([
    page.waitForEvent('popup'),
    page.locator('text=Babel Minify').click()
  ]);
});
step('Close page', async () => {
  await page2.close();
});"
`;

exports[`Synthetics JavaScript formatter hoists page objects to prevent undefined references 1`] = `
"let page1;
let page2;
step('Go to https://vigneshh.in/', async () => {
  await page.goto('https://vigneshh.in/');
  [page1] = await Promise.all([
    page.waitForEvent('popup'),
    page.locator('text=Tailor').click()
  ]);
  await page1.locator('text=Packages 0').click();
  expect(page1.url()).toBe('https://github.com/orgs/zalando/packages?repo_name=tailor');
});
step('Close page', async () => {
  await page1.close();
});
step('Click text=Babel Minify', async () => {
  [page2] = await Promise.all([
    page.waitForEvent('popup'),
    page.locator('text=Babel Minify').click()
  ]);
  await page2.locator(':nth-match(a:has-text(\\"babel-minify\\"), 3)').click();
  expect(page2.url()).toBe('https://github.com/topics/babel-minify');
});
step('Close page', async () => {
  await page2.close();
});"
`;

exports[`Synthetics JavaScript formatter uses custom step names 1`] = `
"step('test-name', async () => {
  await page.goto('https://vigneshh.in/');
  expect(await page.isVisible('text=Babel Minify')).toBeTruthy();
  expect(await page.isEditable('text=Babel Minify')).toBeTruthy();
});"
`;
