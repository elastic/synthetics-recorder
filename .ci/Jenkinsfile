#!/usr/bin/env groovy

@Library('apm@current') _

pipeline {
  agent { label 'ubuntu-20 && immutable' }
  environment {
    REPO = "synthetics-recorder"
    BASE_DIR = "src/github.com/elastic/${env.REPO}"
    DOCKER_BASE_DIR = "/${env.REPO}"
    JOB_GIT_CREDENTIALS = "f6c7695a-671e-4f4f-a331-acdce44ff9ba"
    PIPELINE_LOG_LEVEL = "INFO"
    DISPLAY= ":99"
  }
  options {
    timeout(time: 1, unit: 'HOURS')
    buildDiscarder(logRotator(numToKeepStr: '20', artifactNumToKeepStr: '20', daysToKeepStr: '30'))
    timestamps()
    ansiColor('xterm')
    disableResume()
    durabilityHint('PERFORMANCE_OPTIMIZED')
    rateLimitBuilds(throttle: [count: 60, durationName: 'hour', userBoost: true])
    quietPeriod(10)
  }
  triggers {
    issueCommentTrigger("${obltGitHubComments()}")
  }
  stages {
    stage('Checkout') {
      steps {
        pipelineManager([ cancelPreviousRunningBuilds: [ when: 'PR' ] ])
        deleteDir()
        gitCheckout(basedir: "${BASE_DIR}", githubNotifyFirstTimeContributor: true)
        stash allowEmpty: true, name: 'source', useDefaultExcludes: false
      }
    }
    stage('Install'){
      steps {
        withGithubNotify(context: "Install") {
          withNodeJSEnv() {
            dir("${BASE_DIR}") {
              sh(label: 'npm ci', script: 'npm ci')
            }
          }
        }
      }
    }
    stage('Lint'){
      steps {
        withGithubNotify(context: "Lint") {
          withNodeJSEnv() {
            dir("${BASE_DIR}"){
              sh(label: 'npm lint', script: 'npm run lint')
            }
          }
        }
      }
      post {
        always {
          archiveArtifacts(allowEmptyArchive: true, artifacts: "${BASE_DIR}/eslint-junit.xml")
          junit(allowEmptyResults: true, keepLongStdio: true, testResults: "${BASE_DIR}/eslint-junit.xml")
        }
      }
    }
    stage('Docker test setup') {
      agent {
        dockerfile {
          reuseNode true
            dir "$BASE_DIR"
            filename './e2e/Dockerfile.jenkins'
            additionalBuildArgs  "--build-arg BASE_DIR=\".\" --build-arg DOCKER_BASE_DIR=\"${DOCKER_BASE_DIR}\" --build-arg DISPLAY=\"${DISPLAY}\""
        }
      }
      stages {
        stage('Test'){
          steps {
            withGithubNotify(context: "Test") {
              sh(label: 'run tests', script: "${DOCKER_BASE_DIR}/.ci/scripts/run-test.sh")
            }
          }
        }
      }
    }
    stage('Build'){
      steps {
        withGithubNotify(context: "Build") {
          withNodeJSEnv() {
            dir("${BASE_DIR}"){
              sh(label: 'npm build', script: 'npm run build')
            }
          }
        }
      }
    }
  }
  post {
    cleanup {
      notifyBuildResult(prComment: true)
    }
  }
}
