#!/usr/bin/env groovy

@Library('apm@current') _

pipeline {
  agent { label 'ubuntu-20 && immutable' }
  environment {
    REPO = "synthetics-recorder"
    BASE_DIR = "src/github.com/elastic/${env.REPO}"
    DOCKER_REGISTRY = 'docker.elastic.co'
    DOCKER_ELASTIC_SECRET = 'secret/observability-team/ci/docker-registry/prod'
    JOB_GIT_CREDENTIALS = "f6c7695a-671e-4f4f-a331-acdce44ff9ba"
    PIPELINE_LOG_LEVEL = "INFO"
    RELEASE_URL_MESSAGE = "(<https://github.com/elastic/${env.REPO}/releases/tag/${env.TAG_NAME}|${env.TAG_NAME}>)"
    NOTIFY_TO = 'synthrum+synthetics-recorder@elastic.co'
  }
  options {
    timeout(time: 1, unit: 'HOURS')
    buildDiscarder(logRotator(numToKeepStr: '20', artifactNumToKeepStr: '20', daysToKeepStr: '30'))
    timestamps()
    ansiColor('xterm')
    disableResume()
    durabilityHint('PERFORMANCE_OPTIMIZED')
    rateLimitBuilds(throttle: [count: 60, durationName: 'hour', userBoost: true])
    quietPeriod(10)
  }
  triggers {
    issueCommentTrigger("(${obltGitHubComments()}|^/test all)")
  }
  stages {
    stage('Checkout') {
      options { skipDefaultCheckout() }
      steps {
        whenTrue(isInternalCI() && isTag()) {
          notifyStatus(slackStatus: 'good', subject: "[${env.REPO}] Build for the release tag *${env.TAG_NAME}* has been triggered", body: "Build: (<${env.RUN_DISPLAY_URL}|here>) for further details.")
        }
        pipelineManager([ cancelPreviousRunningBuilds: [ when: 'PR' ] ])
        deleteDir()
        gitCheckout(basedir: "${BASE_DIR}", githubNotifyFirstTimeContributor: true)
        stash(allowEmpty: true, name: 'source', useDefaultExcludes: false)
        dir("${BASE_DIR}") {
          setEnvVar('DOCKER_CHANGES', isGitRegionMatch(patterns: [ '^e2e/Dockerfile.jenkins' ], shouldMatchAll: false).toString())
        }
      }
    }
    stage('Install'){
      options { skipDefaultCheckout() }
      when {
        beforeAgent true
        not { expression { return isInternalCI() && isTag() } }
      }
      steps {
        withGithubNotify(context: "Install") {
          withNodeJSEnv() {
            dir("${BASE_DIR}") {
              sh(label: 'npm ci', script: 'npm ci')
            }
          }
        }
      }
    }
    stage('Lint'){
      options { skipDefaultCheckout() }
      when {
        beforeAgent true
        not { expression { return isInternalCI() && isTag() } }
      }
      steps {
        withGithubNotify(context: "Lint") {
          withNodeJSEnv() {
            dir("${BASE_DIR}"){
              sh(label: 'npm lint', script: 'npm run lint')
            }
          }
        }
        withGithubNotify(context: "Unused exports") {
          withNodeJSEnv() {
            dir("${BASE_DIR}"){
              sh(label: 'npm unused-exports', script: 'npm run unused-exports')
            }
          }
        }
      }
      post {
        always {
          archiveArtifacts(allowEmptyArchive: true, artifacts: "${BASE_DIR}/eslint-junit.xml")
          junit(allowEmptyResults: true, keepLongStdio: true, testResults: "${BASE_DIR}/eslint-junit.xml")
        }
      }
    }
    stage('Build'){
      options { skipDefaultCheckout() }
      when {
        beforeAgent true
        not { expression { return isInternalCI() && isTag() } }
      }
      steps {
        withGithubNotify(context: "Build") {
          withNodeJSEnv() {
            dir("${BASE_DIR}"){
              sh(label: 'npm build', script: 'npm run build')
            }
          }
        }
      }
    }
    stage('Docker build') {
      options { skipDefaultCheckout() }
      when {
        beforeAgent true
        anyOf {
          expression { env.DOCKER_CHANGES == 'true' }
          expression { return env.GITHUB_COMMENT?.contains('all') }
        }
      }
      steps {
        withGithubNotify(context: 'Docker Build') {
          dir("${BASE_DIR}"){
            sh(label: 'docker build', script: ".ci/scripts/docker-build.sh")
            dockerLogin(secret: "${DOCKER_ELASTIC_SECRET}", registry: "${DOCKER_REGISTRY}")
            retryWithSleep(retries: 3, seconds: 5, backoff: true){
              sh(label: 'docker push', script: ".ci/scripts/docker-push.sh")
            }
          }
        }
      }
    }
    stage('Test'){
      options { skipDefaultCheckout() }
      when {
        beforeAgent true
        not { expression { return isInternalCI() && isTag() } }
      }
      steps {
        withGithubNotify(context: "Test") {
          dir("${BASE_DIR}"){
            // NOTE: It uses the current workspace that was configured with npm ci
            sh(label: 'run tests', script: '.ci/scripts/run-test-in-docker.sh')
          }
        }
      }
      post {
        always {
          junit(allowEmptyResults: true, keepLongStdio: true, testResults: "${BASE_DIR}/*junit.xml")
        }
      }
    }
    stage('Release') {
      options { skipDefaultCheckout() }
      when {
        beforeAgent true
        allOf {
          tag pattern: 'v\\d+\\.\\d+.*', comparator: 'REGEXP'
          expression { isInternalCI() }
        }
      }
      environment {
        BUCKET_NAME = 'internal-ci-artifacts'
        BUCKET_SUBFOLDER = "${env.REPO}/${env.TAG_NAME}"
        BUCKET_PATH = "gs://${env.BUCKET_NAME}/${env.BUCKET_SUBFOLDER}"
        BUCKET_CREDENTIALS = 'internal-ci-gcs-plugin'
        SIGNED_ARTIFACTS = 'signed-artifacts'
        BUCKET_SUBFOLDER_SIGNED_ARTIFACTS = "${env.BUCKET_SUBFOLDER}/${env.SIGNED_ARTIFACTS}"
        BUCKET_SIGNED_ARTIFACTS_PATH = "gs://${env.BUCKET_NAME}/${env.BUCKET_SUBFOLDER_SIGNED_ARTIFACTS}"
        RELEASE_URL_MESSAGE = "(<https://github.com/elastic/${env.REPO}/releases/tag/${env.TAG_NAME}|${env.TAG_NAME}>)"
      }
      // QUESTION: It's possible to be all the packages on Linux?
      agent { label 'macosx' }
      stages {
        stage('Dist') {
          options { skipDefaultCheckout() }
          steps {
            deleteDir()
            unstash 'source'
            withNodeJSEnv() {
              withCredentials([string(credentialsId: "2a9602aa-ab9f-4e52-baf3-b71ca88469c7", variable: 'GITHUB_TOKEN')]) {
                dir("${BASE_DIR}"){
                  sh(label: 'npm ci', script: 'npm ci')
                  sh(label: 'npm release', script: 'npm run release')
                }
              }
            }
          }
        }
        stage('Signing CI') {
          options { skipDefaultCheckout() }
          steps {
            dir("${BASE_DIR}") {
              // TODO: what artifacts to be uploaded
              googleStorageUpload(bucket: env.BUCKET_PATH,
                  credentialsId: env.BUCKET_CREDENTIALS,
                  pathPrefix: 'build/packages/',
                  pattern: 'build/packages/**/*',
                  sharedPublicly: false,
                  showInline: true)
              build(wait: true, propagate: true, job: 'elastic+unified-release+master+sign-artifacts-with-gpg', parameters: [string(name: 'gcs_input_path', value: "${env.BUCKET_PATH}")])
            }
          }
        }
        stage('Download signed artifacts') {
          options { skipDefaultCheckout() }
          steps {
            dir("${SIGNED_ARTIFACTS}") {
              // TODO: what artifacts to be downloaded
              googleStorageDownload(bucketUri: "${env.BUCKET_SIGNED_ARTIFACTS_PATH}/*",
                    credentialsId: env.BUCKET_CREDENTIALS,
                    localDirectory: 'build/packages/',
                    pathPrefix: "${env.BUCKET_SUBFOLDER_SIGNED_ARTIFACTS}")
            }
            archiveArtifacts(allowEmptyArchive: true, artifacts: "${SIGNED_ARTIFACTS}/**/*")
          }
        }
        stage('Publish GitHub Release') {
          options { skipDefaultCheckout() }
          steps {
            withGhEnv(version: '2.4.0') {
              // TODO: create GitHub release and upload the signed artifacts.
              echo 'TBD'
            }
          }
        }
      }
      post {
        success {
          notifyStatus(slackStatus: 'good', subject: "[${env.REPO}] Release *${env.TAG_NAME}* published", body: "Build: (<${env.RUN_DISPLAY_URL}|here>)")
        }
        failure {
          notifyStatus(slackStatus: 'warning', subject: "[${env.REPO}] Release *${env.TAG_NAME}* could not be published", body: "Build: (<${env.RUN_DISPLAY_URL}|here>)")
        }
        cleanup {
          deleteDir()
        }
      }
    }
  }
  post {
    cleanup {
      // Reporting disables in the `internal-ci` since credentials are not in place
      // OTOH it avoids duplicated notifications
      whenFalse(isInternalCI()){
        notifyBuildResult(prComment: true)
      }
    }
  }
}

def notifyStatus(def args = [:]) {
  releaseNotification(slackChannel: "${env.SLACK_CHANNEL}",
                      slackColor: args.slackStatus,
                      slackCredentialsId: 'jenkins-slack-integration-token',
                      to: "${env.NOTIFY_TO}",
                      subject: args.subject,
                      body: args.body)
}
