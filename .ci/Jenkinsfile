#!/usr/bin/env groovy

@Library('apm@current') _

pipeline {
  agent { label 'ubuntu-20.04 && immutable' }
  environment {
    REPO = "synthetics-recorder"
    BASE_DIR = "src/github.com/elastic/${env.REPO}"
    DOCKER_REGISTRY = 'docker.elastic.co'
    DOCKER_ELASTIC_SECRET = 'secret/observability-team/ci/docker-registry/prod'
    JOB_GIT_CREDENTIALS = "f6c7695a-671e-4f4f-a331-acdce44ff9ba"
    PIPELINE_LOG_LEVEL = "INFO"
    NOTIFY_TO = 'victor.martinez+synthetics-recorder@elastic.co'
  }
  options {
    timeout(time: 1, unit: 'HOURS')
    buildDiscarder(logRotator(numToKeepStr: '20', artifactNumToKeepStr: '20', daysToKeepStr: '30'))
    timestamps()
    ansiColor('xterm')
    disableResume()
    durabilityHint('PERFORMANCE_OPTIMIZED')
    rateLimitBuilds(throttle: [count: 60, durationName: 'hour', userBoost: true])
    quietPeriod(10)
  }
  triggers {
    issueCommentTrigger("(${obltGitHubComments()}|^/test all)")
  }
  stages {
    stage('Checkout') {
      options { skipDefaultCheckout() }
      steps {
        whenTrue(isInternalCI() && isTag()) {
          notifyStatus(slackStatus: 'good', subject: "[${env.REPO}] Build for the release tag *${env.TAG_NAME}* has been triggered", body: "Build: (<${env.RUN_DISPLAY_URL}|here>) for further details.")
        }
        // TODO: to be changed
        // pipelineManager([ cancelPreviousRunningBuilds: [ when: 'PR' ] ])
        deleteDir()
        gitCheckout(basedir: "${BASE_DIR}", githubNotifyFirstTimeContributor: true)
        stash(allowEmpty: true, name: 'source', useDefaultExcludes: false)
        dir("${BASE_DIR}") {
          setEnvVar('DOCKER_CHANGES', isGitRegionMatch(patterns: [ '^e2e/Dockerfile.jenkins' ], shouldMatchAll: false).toString())
        }
      }
    }
    stage('Install'){
      options { skipDefaultCheckout() }
      when {
        beforeAgent true
        //expression { return !isTag() }
        not { changeRequest () }
      }
      steps {
        withGithubNotify(context: "Install") {
          withNodeJSEnv() {
            dir("${BASE_DIR}") {
              sh(label: 'npm ci', script: 'npm ci')
            }
          }
        }
      }
    }
    stage('Lint'){
      options { skipDefaultCheckout() }
      when {
        beforeAgent true
        //expression { return !isTag() }
        not { changeRequest () }
      }
      steps {
        withGithubNotify(context: "Lint") {
          withNodeJSEnv() {
            dir("${BASE_DIR}"){
              sh(label: 'npm lint', script: 'npm run lint')
            }
          }
        }
        withGithubNotify(context: "Unused exports") {
          withNodeJSEnv() {
            dir("${BASE_DIR}"){
              sh(label: 'npm unused-exports', script: 'npm run unused-exports')
            }
          }
        }
      }
      post {
        always {
          archiveArtifacts(allowEmptyArchive: true, artifacts: "${BASE_DIR}/eslint-junit.xml")
          junit(allowEmptyResults: true, keepLongStdio: true, testResults: "${BASE_DIR}/eslint-junit.xml")
        }
      }
    }
    stage('Build'){
      options { skipDefaultCheckout() }
      when {
        beforeAgent true
        //expression { return !isTag() }
        not { changeRequest () }
      }
      steps {
        withGithubNotify(context: "Build") {
          withNodeJSEnv() {
            dir("${BASE_DIR}"){
              sh(label: 'npm build', script: 'npm run build')
            }
          }
        }
      }
    }
    stage('Docker build') {
      options { skipDefaultCheckout() }
      when {
        beforeAgent true
        anyOf {
          expression { env.DOCKER_CHANGES == 'true' }
          expression { return env.GITHUB_COMMENT?.contains('all') }
        }
      }
      steps {
        withGithubNotify(context: 'Docker Build') {
          dir("${BASE_DIR}"){
            sh(label: 'docker build', script: ".ci/scripts/docker-build.sh")
            dockerLogin(secret: "${DOCKER_ELASTIC_SECRET}", registry: "${DOCKER_REGISTRY}")
            retryWithSleep(retries: 3, seconds: 5, backoff: true){
              sh(label: 'docker push', script: ".ci/scripts/docker-push.sh")
            }
          }
        }
      }
    }
    stage('Test'){
      options { skipDefaultCheckout() }
      when {
        beforeAgent true
        //expression { return !isTag() }
        not { changeRequest () }
      }
      steps {
        withGithubNotify(context: "Test") {
          dir("${BASE_DIR}"){
            // NOTE: It uses the current workspace that was configured with npm ci
            sh(label: 'run tests', script: '.ci/scripts/run-test-in-docker.sh')
          }
        }
      }
      post {
        always {
          junit(allowEmptyResults: true, keepLongStdio: true, testResults: "${BASE_DIR}/*junit.xml")
        }
      }
    }
    stage('Release') {
      options { skipDefaultCheckout() }
      when {
        beforeAgent true
        allOf {
          //tag pattern: 'v\\d+\\.\\d+.*', comparator: 'REGEXP'
          expression { env.CHANGE_ID ==~ /.*238/ }
          expression { isInternalCI() }
        }
      }
      environment {
        BUCKET_NAME = 'internal-ci-artifacts'
        // TODO: to be removed
        TAG_NAME = 'test-purpose'
        // TODO: to be changed
        //BUCKET_SUBFOLDER = "${env.REPO}/${env.TAG_NAME}"
        BUCKET_SUBFOLDER = "${env.REPO}/${env.TAG_NAME}/${env.BUILD_ID}"
        BUCKET_PATH = "gs://${env.BUCKET_NAME}/${env.BUCKET_SUBFOLDER}"
        BUCKET_CREDENTIALS = 'internal-ci-gcs-plugin'
        SIGNED_ARTIFACTS = 'signed-artifacts'
        BUCKET_SUBFOLDER_SIGNED_ARTIFACTS = "${env.BUCKET_SUBFOLDER}/${env.SIGNED_ARTIFACTS}"
        BUCKET_SIGNED_ARTIFACTS_PATH = "gs://${env.BUCKET_NAME}/${env.BUCKET_SUBFOLDER_SIGNED_ARTIFACTS}"
        DIST_FOLDER = 'dist'
        RELEASE_URL_MESSAGE = "(<https://github.com/elastic/${env.REPO}/releases/tag/${env.TAG_NAME}|${env.TAG_NAME}>)"
        HOME = "${WORKSPACE}"
      }
      agent { label 'macosx' }
      stages {
        stage('Dist') {
          options { skipDefaultCheckout() }
          steps {
            deleteDir()
            unstash 'source'
            withNodeJSEnv() {
              dir("${BASE_DIR}"){
                sh(label: 'npm ci', script: 'npm ci')
                runReleaseWithKeychain()
              }
            }
          }
        }
        stage('Signing CI') {
          options { skipDefaultCheckout() }
          steps {
            dir("${BASE_DIR}") {
              uploadBinariesToBeSigned(['deb', 'zip'])
              build(job: 'elastic+unified-release+master+sign-artifacts-with-gpg',
                    parameters: [string(name: 'gcs_input_path', value: "${env.BUCKET_PATH}")],
                    wait: true,
                    propagate: true)
              uploadBinariesToBeSigned(['exe'])
            }
          }
        }
        stage('Download signed artifacts') {
          options { skipDefaultCheckout() }
          steps {
            dir("${SIGNED_ARTIFACTS}") {
              downloadSignedBinaries()
            }
          }
        }
        stage('Publish GitHub Release') {
          options { skipDefaultCheckout() }
          steps {
            dir("${SIGNED_ARTIFACTS}") {
              withGhEnv(version: '2.4.0') {
                // TODO: create GitHub release and upload the signed artifacts.
                sh(label: 'publish release', script:
                  """
                    ls -l ${DIST_FOLDER}/*.* || true
                    gh \
                      release \
                      create \
                      "${TAG_NAME}" \
                      --draft \
                      --title "${TAG_NAME}" \
                      --repo v1v/${REPO} \
                      ${DIST_FOLDER}/*.*
                  """)
              }
            }
          }
        }
      }
      post {
        success {
          notifyStatus(slackStatus: 'good', subject: "[${env.REPO}] Release *${env.TAG_NAME}* published", body: "Build: (<${env.RUN_DISPLAY_URL}|here>)")
        }
        failure {
          notifyStatus(slackStatus: 'warning', subject: "[${env.REPO}] Release *${env.TAG_NAME}* could not be published", body: "Build: (<${env.RUN_DISPLAY_URL}|here>)")
        }
        /*cleanup {
          deleteDir()
        }*/
      }
    }
  }
  post {
    cleanup {
      // Reporting disables in the `internal-ci` since credentials are not in place
      // OTOH it avoids duplicated notifications
      whenFalse(isInternalCI()){
        notifyBuildResult(prComment: true)
      }
    }
  }
}

def notifyStatus(def args = [:]) {
  releaseNotification(slackChannel: "${env.SLACK_CHANNEL}",
                      slackColor: args.slackStatus,
                      slackCredentialsId: 'jenkins-slack-integration-token',
                      to: "${env.NOTIFY_TO}",
                      subject: args.subject,
                      body: args.body)
}

def downloadSignedBinaries() {
  googleStorageDownload(bucketUri: "${env.BUCKET_SIGNED_ARTIFACTS_PATH}/*",
                        credentialsId: env.BUCKET_CREDENTIALS,
                        localDirectory: "${DIST_FOLDER}/",
                        pathPrefix: "${env.BUCKET_SUBFOLDER_SIGNED_ARTIFACTS}")
  archiveArtifacts(allowEmptyArchive: false, artifacts: "${DIST_FOLDER}/*.*")
}

def uploadBinariesToBeSigned(extensions = [:]) {
  extensions?.each { extension ->
    googleStorageUpload(bucket: env.BUCKET_PATH,
                        credentialsId: env.BUCKET_CREDENTIALS,
                        pathPrefix: "${env.DIST_FOLDER}/",
                        pattern: "${env.DIST_FOLDER}/*.${extension}",
                        sharedPublicly: false,
                        showInline: true)
  }
}

def runReleaseWithKeychain() {
  def vault = getVaultSecret(secret: 'secret/observability-team/ci/synthetics-recorder-macos-vault').data
  if (!vault.containsKey('vault_secret_id') || !vault.containsKey('vault_role_id') || !vault.containsKey('vault_addr')) {
    error("runReleaseWithKeychain: secret could not be accessed correctly")
  }
  withEnvMask(
    vars: [
      [var: 'VAULT_SECRET_ID_NOTARIZER', password: vault.vault_secret_id],
      [var: 'VAULT_ROLE_ID_NOTARIZER', password: vault.vault_role_id],
      [var: 'VAULT_ADDR', password: vault.vault_addr],
  ]){
    sh(label: 'npm release-ci with keychain', script: '''
      set +x
      export CSC_KEYCHAIN="$(pwd)/Elastic.keychain.db"
      echo 'prepare vault'
      VAULT_TOKEN=$(vault write -field=token auth/approle/login role_id="$VAULT_ROLE_ID_NOTARIZER" secret_id="$VAULT_SECRET_ID_NOTARIZER")
      export VAULT_TOKEN

      echo 'prepare keychain'
      vault read -field=db secret/jenkins-ci/macos-codesign-keychain | base64 --decode > "$CSC_KEYCHAIN"

      echo 'prepare keychain-password'
      KEYCHAIN_PASSWORD=$(vault read -field=keychain-password secret/release/apple)
      export KEYCHAIN_PASSWORD

      echo 'set default keychain'
      set -x
      security list-keychains -s "$CSC_KEYCHAIN"
      security default-keychain -s "$CSC_KEYCHAIN"

      echo 'unblock keychain'
      set +x
      security unlock-keychain -p "$KEYCHAIN_PASSWORD" "$CSC_KEYCHAIN"

      set -x
      security find-identity -v
      security find-identity $CSC_KEYCHAIN -v
      ls -l $CSC_KEYCHAIN

      echo 'run release-ci'
      DEBUG=electron-osx-sign npm run release-ci
      ''')
  }
}
