#!/usr/bin/env groovy

@Library('apm@current') _

pipeline {
  agent { label 'ubuntu-20 && immutable' }
  environment {
    REPO = "synthetics-recorder"
    BASE_DIR = "src/github.com/elastic/${env.REPO}"
    DOCKER_BASE_DIR = "/${env.REPO}"
    JOB_GIT_CREDENTIALS = "f6c7695a-671e-4f4f-a331-acdce44ff9ba"
    PIPELINE_LOG_LEVEL = "INFO"
    DISPLAY= ":99"
    RELEASE_URL_MESSAGE = "(<https://github.com/elastic/${env.REPO}/releases/tag/${env.TAG_NAME}|${env.TAG_NAME}>)"
    NOTIFY_TO = 'synthrum+synthetics-recorder@elastic.co'
  }
  options {
    timeout(time: 1, unit: 'HOURS')
    buildDiscarder(logRotator(numToKeepStr: '20', artifactNumToKeepStr: '20', daysToKeepStr: '30'))
    timestamps()
    ansiColor('xterm')
    disableResume()
    durabilityHint('PERFORMANCE_OPTIMIZED')
    rateLimitBuilds(throttle: [count: 60, durationName: 'hour', userBoost: true])
    quietPeriod(10)
  }
  triggers {
    issueCommentTrigger("${obltGitHubComments()}")
  }
  stages {
    stage('Checkout') {
      options { skipDefaultCheckout() }
      steps {
        pipelineManager([ cancelPreviousRunningBuilds: [ when: 'PR' ] ])
        deleteDir()
        gitCheckout(basedir: "${BASE_DIR}", githubNotifyFirstTimeContributor: true)
        stash allowEmpty: true, name: 'source', useDefaultExcludes: false
      }
    }
    stage('Install'){
      options { skipDefaultCheckout() }
      when { expression { return !isTag() } }
      steps {
        withGithubNotify(context: "Install") {
          withNodeJSEnv() {
            dir("${BASE_DIR}") {
              sh(label: 'npm ci', script: 'npm ci')
            }
          }
        }
      }
    }
    stage('Lint'){
      options { skipDefaultCheckout() }
      when { expression { return !isTag() } }
      steps {
        withGithubNotify(context: "Lint") {
          withNodeJSEnv() {
            dir("${BASE_DIR}"){
              sh(label: 'npm lint', script: 'npm run lint')
            }
          }
        }
      }
      post {
        always {
          archiveArtifacts(allowEmptyArchive: true, artifacts: "${BASE_DIR}/eslint-junit.xml")
          junit(allowEmptyResults: true, keepLongStdio: true, testResults: "${BASE_DIR}/eslint-junit.xml")
        }
      }
    }
    stage('Docker test setup') {
      options { skipDefaultCheckout() }
      when {
        beforeAgent true
        expression { return !isTag() }
      }
      agent {
        dockerfile {
          reuseNode true
            dir "$BASE_DIR"
            filename './e2e/Dockerfile.jenkins'
            additionalBuildArgs  "--build-arg BASE_DIR=\".\" --build-arg DOCKER_BASE_DIR=\"${DOCKER_BASE_DIR}\" --build-arg DISPLAY=\"${DISPLAY}\""
            args "-u 0:0"
        }
      }
      stages {
        stage('Test'){
          steps {
            withGithubNotify(context: "Test") {
              sh(label: 'run tests', script: "${DOCKER_BASE_DIR}/.ci/scripts/run-test.sh")
            }
          }
        }
      }
    }
    stage('Build'){
      options { skipDefaultCheckout() }
      when { expression { return !isTag() } }
      steps {
        withGithubNotify(context: "Build") {
          withNodeJSEnv() {
            dir("${BASE_DIR}"){
              sh(label: 'npm build', script: 'npm run build')
            }
          }
        }
      }
    }
    stage('Release') {
      options { skipDefaultCheckout() }
      when {
        beforeAgent true
        tag pattern: 'v\\d+\\.\\d+.*', comparator: 'REGEXP'
      }
      agent { label 'macosx' }
      stages {
        stage('Dist') {
          steps {
            deleteDir()
            unstash 'source'
            withNodeJSEnv() {
              withCredentials([string(credentialsId: "2a9602aa-ab9f-4e52-baf3-b71ca88469c7", variable: 'GITHUB_TOKEN')]) {
                dir("${BASE_DIR}"){
                  sh(label: 'npm ci', script: 'npm ci')
                  sh(label: 'npm release', script: 'npm run release')
                }
              }
            }
          }
        }
      }
      post {
        success {
          notifyStatus(slackStatus: 'good', subject: "[${env.REPO}] Release *${env.TAG_NAME}* published", body: "Build: (<${env.RUN_DISPLAY_URL}|here>)")
        }
        failure {
          notifyStatus(slackStatus: 'warning', subject: "[${env.REPO}] Release *${env.TAG_NAME}* could not be published", body: "Build: (<${env.RUN_DISPLAY_URL}|here>)")
        }
        cleanup {
          deleteDir()
        }
      }
    }
  }
  post {
    cleanup {
      notifyBuildResult(prComment: true)
    }
  }
}


def notifyStatus(def args = [:]) {
  releaseNotification(slackChannel: "${env.SLACK_CHANNEL}",
                      slackColor: args.slackStatus,
                      slackCredentialsId: 'jenkins-slack-integration-token',
                      to: "${env.NOTIFY_TO}",
                      subject: args.subject,
                      body: args.body)
}
